# -*- coding: utf-8 -*-
"""Big Data Project - Unveiling Consumer Insights.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DSp-sO8kBr_nqGcEmGLdzEzKdYWdOP5h

#Enhancing Financial Services: Unveiling Consumer Insights
#####Consumer Complaints Dataset URL: https://www.kaggle.com/datasets/ashwinik/consumer-complaints-financial-products
#####State Population Dataset URL:https://www2.census.gov/programs-surveys/popest/tables/2010-2016/state/totals/
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pyspark
!pip install findspark
!pip install geopandas matplotlib
!pip install plotly-express

import pyspark
from pyspark.sql.functions import col,desc
from pyspark.sql import functions as F
from pyspark.sql.functions import col, to_date, year
import pyspark.sql.types as T
import plotly.express as px

import matplotlib
# %matplotlib inline
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt
#import seaborn as sns
import findspark
findspark.init()

from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession

from google.colab import drive
drive.mount('/content/drive')

spark = SparkSession.builder.appName('project').getOrCreate()

spark

import pandas as pd
df = pd.read_csv('/content/drive/Shareddrives/Big Data Project/Consumer_Complaints.csv')
pop_df = pd.read_csv('/content/drive/Shareddrives/Big Data Project/population.csv')

df = spark.createDataFrame(df)
pop_df = spark.createDataFrame(pop_df)

df.show()

df.columns

df.printSchema

"""# Q-1 What are the top 10 banks that have received the most complaints?

"""

total_complaint_counts = df.groupby('Company').count().alias('count')
sorted_total_complaint_counts = total_complaint_counts.orderBy(desc('count'))

unique_bank_names = df.select('Company').distinct().filter(col('Company').isNotNull()).count()
print('The number of total banks is:', unique_bank_names)

top_10_banks_in_us = sorted_total_complaint_counts.limit(10)
print('Top 10 banks that have received the most complaints:')
top_10_banks_in_us.show()

filtered_banks = df.filter(F.col('Company').isNotNull())
bank_counts = filtered_banks.groupBy('Product', 'Company').count()

top_10_banks = bank_counts.groupBy('Company').sum('count').orderBy(F.desc('sum(count)')).limit(10)
top_10_banks_pd = top_10_banks.toPandas()

custom_colors = ['#001F3F', '#002C5B', '#003C75', '#004E91', '#0066AD', '#0077C2', '#0087D7', '#0098EC', '#00A9FF', '#19BFFF']

plt.figure(figsize=(12, 6))
plt.barh(top_10_banks_pd['Company'], top_10_banks_pd['sum(count)'], color = custom_colors)
plt.title('Top 10 Banks with Complaints in the U.S.', fontweight="bold")
plt.xlabel('Count')
plt.ylabel('Bank')
plt.show()

"""#Q-2 What is the percentage of complaints from each state?"""

complaint_counts_by_states = df.groupBy('State').agg(F.count('*').alias('Complaints'))

complaint_counts_by_states = complaint_counts_by_states.filter(
    (complaint_counts_by_states.State.isNotNull())
)

state_df = (complaint_counts_by_states.withColumn('Complaints', complaint_counts_by_states['Complaints'].cast(T.IntegerType()))).join(pop_df, on="State", how="inner")
state_df = state_df.withColumn("Population", (F.regexp_replace(col('Population'), '[^0-9]', '')).cast(T.IntegerType()))
percentage_df = state_df.withColumn("percentage_complaints", (col("Complaints") / col("Population")) * 100)
sorted_states = percentage_df.orderBy('percentage_complaints', ascending=False)
sorted_states.show()

fig = px.choropleth(sorted_states.toPandas(),
                    locations='State',
                    locationmode="USA-states",
                    scope="usa",
                    color='percentage_complaints',
                    color_continuous_scale="Viridis_r")

fig.update_layout(
    title_text='Total Complaints Percentage by State',
    title_font_size=22,
    title_font_color="black",
    title_x=0.45
)

fig.show()

"""# Q-3 What are the most common complaints (issues and products) reported by consumers?"""

product_counts = df.filter(col('Product').isNotNull()).groupBy('Product').count()
sorted_product_counts = product_counts.orderBy(desc('count'))
top_3_product_complaints = sorted_product_counts.limit(3)

top_3_product_complaints.show()

issue_counts = df.filter(col('Issue').isNotNull()).groupBy('Issue').count()
sorted_issue_counts = issue_counts.orderBy(desc('count'))
top_3_issue_complaints = sorted_issue_counts.limit(3)

top_3_issue_complaints.show()

"""# Q-4 How do consumers typically submit their complaints?"""

submission_counts = df.groupBy('Submitted via').count()
sorted_submission_counts = submission_counts.orderBy(F.desc('count'))
sorted_submission_counts.show()

sorted_submission_counts_pandas = sorted_submission_counts.toPandas()

plt.figure(figsize=(8, 8))
pie_colors = ['#FFB6C1', '#B19CD9', '#FDFD96', '#FFDAB9', '#AEC6CF', '#98FB98']
plt.pie(sorted_submission_counts_pandas['count'], labels=sorted_submission_counts_pandas['Submitted via'], colors = pie_colors, autopct='%1.1f%%')
plt.axis('equal')
plt.title('Complaints Submission Types', fontweight="bold")
plt.show()

"""##How complaints are submitted each year"""

year_df = df.withColumn("Date received", to_date(col("Date received"), "MM/dd/yyyy"))
complaints_year_df = year_df.withColumn("Year", year(col("Date received")))

grouped_data = complaints_year_df.groupBy("Year", "Submitted via").count()
pivoted_data = grouped_data.groupBy("Year").pivot("Submitted via").sum("count").fillna(0)
pivoted_data.show()

pandas_data = pivoted_data.toPandas()
pandas_data = pandas_data.sort_values(by="Year")

filtered_data = pandas_data[(pandas_data["Year"] > 2011)]

plt.plot(filtered_data["Year"], filtered_data["Web"], marker='h', label="Web")
plt.plot(filtered_data["Year"], filtered_data["Referral"], marker='h', label="Referral")
plt.plot(filtered_data["Year"], filtered_data["Phone"], marker='h', label="Phone")
plt.plot(filtered_data["Year"], filtered_data["Postal mail"], marker='h', label="Postal mail")
plt.plot(filtered_data["Year"], filtered_data["Fax"], marker='h', label="Fax")
plt.plot(filtered_data["Year"], filtered_data["Email"], marker='h', label="Email")

plt.title('Submission Complaints Trend by Year', fontweight="bold")
plt.xlabel('Year')
plt.ylabel('Count')

plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(base=1))

plt.legend(loc='best')
plt.show()

"""# Q-5 Identify the product categories that cause the most consumer disputes.

"""

disputed_df = df.filter(col('Consumer disputed?') == 'Yes')
disputed_df_size = disputed_df.count()
num_rows = df.count()
ratio_disputed = disputed_df_size / num_rows
ratio_not_disputed = 1 - ratio_disputed

labels = ['Disputed', 'Not Disputed']
sizes = [ratio_disputed, ratio_not_disputed]
colors = ['#ffff99', '#66b3ff']
explode = (0.1, 0)

plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)

plt.axis('equal')
plt.title('Ratio of Disputed Customers in the Data Set')

disputed_products = disputed_df.groupBy('Product').count()
sorted_disputed_products = disputed_products.orderBy(col('count').desc())
top_3_products_disputed = sorted_disputed_products.limit(3)
top_3_products_disputed.show()

sorted_disputed_products_pandas = sorted_disputed_products.toPandas()

plt.figure(figsize=(10, 6))
plt.plot(sorted_disputed_products_pandas['Product'], sorted_disputed_products_pandas['count'], color='lightskyblue')
plt.fill_between(sorted_disputed_products_pandas['Product'], sorted_disputed_products_pandas['count'], color='lightskyblue')
plt.title('Product Categories Causing Consumer Disputes', fontweight="bold")
plt.xticks(rotation=90)
plt.xlabel('Product')
plt.ylabel('Count')
plt.show()